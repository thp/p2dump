/*
 * Privateer 2: The Darkening -- Data Dumper
 * Copyright (c) 2016, 2017, Thomas Perl
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
 * REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
 * INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
 * LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
 * OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
 * PERFORMANCE OF THIS SOFTWARE.
 */

#include "palette.h"

#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>

#include <string>

/**
 * Extracted and adapted from GAME.GIF inside this zip file:
 * http://download.wcnews.com/files/p2/P2_Archive.zip
 **/
unsigned char default_pal[] = {
  0x00, 0x00, 0x00, 0x55, 0x25, 0x04, 0x68, 0x2d, 0x04, 0x68, 0x2d, 0x04,
  0x7b, 0x34, 0x04, 0x8e, 0x3b, 0x03, 0x8e, 0x3b, 0x03, 0xa1, 0x43, 0x03,
  0xb4, 0x4a, 0x03, 0xb4, 0x4a, 0x03, 0xc6, 0x51, 0x03, 0xc6, 0x51, 0x03,
  0xd9, 0x59, 0x03, 0xd9, 0x59, 0x03, 0xec, 0x60, 0x03, 0xfc, 0x67, 0x03,
  0xfc, 0x67, 0x03, 0xfc, 0x78, 0x1c, 0xfc, 0x7f, 0x27, 0xfc, 0x7f, 0x27,
  0xfc, 0x87, 0x32, 0xfc, 0x87, 0x32, 0xfc, 0x8e, 0x3d, 0xfc, 0x8e, 0x3d,
  0xfc, 0x96, 0x48, 0xfc, 0x9d, 0x53, 0xfc, 0x9d, 0x53, 0xfc, 0xa5, 0x5e,
  0xfc, 0xa5, 0x5e, 0xfc, 0xac, 0x69, 0xfc, 0xb4, 0x74, 0xfb, 0xbb, 0x7e,
  0x46, 0x3c, 0x0d, 0x53, 0x47, 0x0c, 0x53, 0x47, 0x0c, 0x5f, 0x51, 0x0b,
  0x6c, 0x5c, 0x0b, 0x6c, 0x5c, 0x0b, 0x78, 0x66, 0x0a, 0x85, 0x71, 0x09,
  0x85, 0x71, 0x09, 0x91, 0x7c, 0x08, 0x91, 0x7c, 0x08, 0x9e, 0x86, 0x07,
  0x9e, 0x86, 0x07, 0xaa, 0x91, 0x06, 0xb7, 0x9b, 0x05, 0xb7, 0x9b, 0x05,
  0xc3, 0xa6, 0x04, 0xc7, 0xab, 0x0e, 0xc7, 0xab, 0x0e, 0xcb, 0xaf, 0x18,
  0xcb, 0xaf, 0x18, 0xce, 0xb4, 0x21, 0xce, 0xb4, 0x21, 0xd2, 0xb8, 0x2b,
  0xd6, 0xbd, 0x38, 0xd6, 0xbd, 0x38, 0xda, 0xc2, 0x46, 0xda, 0xc2, 0x46,
  0xdd, 0xc8, 0x53, 0xe1, 0xcd, 0x60, 0xe5, 0xd2, 0x6e, 0xe5, 0xd2, 0x6e,
  0x11, 0x20, 0x31, 0x12, 0x24, 0x37, 0x12, 0x24, 0x37, 0x12, 0x28, 0x3e,
  0x12, 0x2c, 0x44, 0x12, 0x2c, 0x44, 0x12, 0x30, 0x4b, 0x13, 0x34, 0x51,
  0x13, 0x34, 0x51, 0x13, 0x38, 0x58, 0x13, 0x38, 0x58, 0x13, 0x3c, 0x5f,
  0x13, 0x3c, 0x5f, 0x13, 0x40, 0x67, 0x14, 0x45, 0x6e, 0x14, 0x45, 0x6e,
  0x14, 0x49, 0x75, 0x1c, 0x51, 0x7d, 0x1c, 0x51, 0x7d, 0x23, 0x59, 0x84,
  0x23, 0x59, 0x84, 0x2a, 0x60, 0x8c, 0x2a, 0x60, 0x8c, 0x31, 0x68, 0x93,
  0x38, 0x6f, 0x9a, 0x38, 0x6f, 0x9a, 0x3f, 0x77, 0xa2, 0x3f, 0x77, 0xa2,
  0x46, 0x7f, 0xa9, 0x4e, 0x8a, 0xb1, 0x57, 0x95, 0xb8, 0x57, 0x95, 0xb8,
  0x00, 0x00, 0x00, 0x43, 0x0d, 0x09, 0x4f, 0x0f, 0x0b, 0x4f, 0x0f, 0x0b,
  0x5b, 0x11, 0x0d, 0x68, 0x13, 0x0f, 0x68, 0x13, 0x0f, 0x74, 0x15, 0x11,
  0x80, 0x17, 0x13, 0x80, 0x17, 0x13, 0x8d, 0x19, 0x15, 0x8d, 0x19, 0x15,
  0x99, 0x1a, 0x16, 0x99, 0x1a, 0x16, 0xa5, 0x1c, 0x18, 0xb2, 0x1e, 0x1a,
  0xb2, 0x1e, 0x1a, 0xbe, 0x20, 0x1c, 0xc2, 0x29, 0x25, 0xc2, 0x29, 0x25,
  0xc6, 0x32, 0x2f, 0xc6, 0x32, 0x2f, 0xca, 0x3c, 0x38, 0xca, 0x3c, 0x38,
  0xce, 0x45, 0x42, 0xd2, 0x4f, 0x4c, 0xd2, 0x4f, 0x4c, 0xd6, 0x58, 0x56,
  0xd6, 0x58, 0x56, 0xda, 0x62, 0x5f, 0xde, 0x6b, 0x69, 0xe3, 0x75, 0x73,
  0x18, 0x2c, 0x04, 0x1c, 0x41, 0x04, 0x24, 0x55, 0x08, 0x24, 0x55, 0x08,
  0x28, 0x69, 0x08, 0x28, 0x69, 0x08, 0x28, 0x69, 0x08, 0x2c, 0x82, 0x0c,
  0x2c, 0x82, 0x0c, 0x34, 0x8e, 0x14, 0x34, 0x8e, 0x14, 0x3c, 0x9e, 0x1c,
  0x4d, 0xa6, 0x2c, 0x4d, 0xa6, 0x2c, 0x63, 0xb1, 0x46, 0x79, 0xbc, 0x60,
  0x04, 0x25, 0x2b, 0x05, 0x2f, 0x36, 0x07, 0x38, 0x40, 0x07, 0x38, 0x40,
  0x08, 0x41, 0x4a, 0x08, 0x41, 0x4a, 0x08, 0x41, 0x4a, 0x0d, 0x4e, 0x56,
  0x0d, 0x4e, 0x56, 0x12, 0x5a, 0x63, 0x12, 0x5a, 0x63, 0x17, 0x67, 0x6f,
  0x1b, 0x74, 0x7b, 0x1b, 0x74, 0x7b, 0x20, 0x80, 0x88, 0x25, 0x8d, 0x94,
  0x0f, 0x12, 0x0f, 0x11, 0x15, 0x11, 0x14, 0x19, 0x14, 0x14, 0x19, 0x14,
  0x17, 0x1c, 0x17, 0x19, 0x20, 0x19, 0x19, 0x20, 0x19, 0x1c, 0x23, 0x1c,
  0x1f, 0x27, 0x1f, 0x1f, 0x27, 0x1f, 0x21, 0x2a, 0x21, 0x21, 0x2a, 0x21,
  0x24, 0x2e, 0x24, 0x24, 0x2e, 0x24, 0x27, 0x31, 0x27, 0x29, 0x35, 0x29,
  0x29, 0x35, 0x29, 0x2c, 0x38, 0x2c, 0x31, 0x40, 0x31, 0x31, 0x40, 0x31,
  0x36, 0x49, 0x36, 0x36, 0x49, 0x36, 0x3b, 0x51, 0x3a, 0x3b, 0x51, 0x3a,
  0x40, 0x5a, 0x3f, 0x45, 0x62, 0x44, 0x45, 0x62, 0x44, 0x4a, 0x6a, 0x49,
  0x4a, 0x6a, 0x49, 0x4f, 0x73, 0x4d, 0x55, 0x7b, 0x52, 0x5a, 0x83, 0x57,
  0x1d, 0x18, 0x15, 0x25, 0x1e, 0x1a, 0x2d, 0x24, 0x1f, 0x2d, 0x24, 0x1f,
  0x35, 0x2a, 0x25, 0x35, 0x2a, 0x25, 0x3d, 0x30, 0x2a, 0x45, 0x36, 0x2f,
  0x45, 0x36, 0x2f, 0x45, 0x36, 0x2f, 0x4d, 0x3d, 0x34, 0x55, 0x43, 0x3a,
  0x5d, 0x49, 0x3f, 0x5d, 0x49, 0x3f, 0x67, 0x55, 0x4b, 0x67, 0x55, 0x4b,
  0x72, 0x60, 0x57, 0x7c, 0x6c, 0x63, 0x87, 0x77, 0x6f, 0x87, 0x77, 0x6f,
  0x87, 0x77, 0x6f, 0x87, 0x77, 0x6f, 0x91, 0x83, 0x7b, 0xa6, 0x9a, 0x93,
  0x4a, 0x10, 0x39, 0x60, 0x22, 0x53, 0x75, 0x33, 0x6d, 0x8b, 0x45, 0x87,
  0xa0, 0x57, 0xa1, 0xa0, 0x57, 0xa1, 0xa0, 0x57, 0xa1, 0xb6, 0x69, 0xbb,
  0x2f, 0x2f, 0x2f, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37,
  0x3e, 0x3e, 0x3e, 0x46, 0x46, 0x46, 0x46, 0x46, 0x46, 0x4e, 0x4e, 0x4e,
  0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d, 0x5d,
  0x65, 0x65, 0x65, 0x65, 0x65, 0x65, 0x6d, 0x6d, 0x6d, 0x74, 0x74, 0x74,
  0x74, 0x74, 0x74, 0x7c, 0x7c, 0x7c, 0x84, 0x84, 0x84, 0x84, 0x84, 0x84,
  0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x8b, 0x93, 0x93, 0x93, 0x9b, 0x9b, 0x9b,
  0xa2, 0xa2, 0xa2, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xb2, 0xb2, 0xb2,
  0xb2, 0xb2, 0xb2, 0xba, 0xba, 0xba, 0xc1, 0xc1, 0xc1, 0xc9, 0xc9, 0xc9
};

#include "priv2.h"

namespace priv2 {
namespace gfx {

Palette::Palette()
    : palette()
    , is_raw(false)
{
    memcpy(palette, default_pal, sizeof(default_pal));
}

uint32_t
Palette::lookup(uint8_t index)
{
    float f = is_raw ? 2.4f : 1.0f;
    uint32_t r = (uint32_t)(f * palette[3 * index + 0]) & 0xFF;
    uint32_t g = (uint32_t)(f * palette[3 * index + 1]) & 0xFF;
    uint32_t b = (uint32_t)(f * palette[3 * index + 2]) & 0xFF;
    uint32_t a = 0xFF;

    return (a << 24) | (b << 16) | (g << 8) | (r);
}

void
Palette::raw_from_buffer(const char *buf, size_t len)
{
    is_raw = true;

    if (len != 256 * 3) {
        priv2::fail("Invalid palette buffer");
    }

    memcpy(palette, buf, len);
}

void
Palette::raw_from_file(const std::string &filename)
{
    auto paldata = priv2::read_file(filename.c_str());
    raw_from_buffer(paldata.data(), paldata.size());
}

Palette::~Palette()
{
}

void save_png(Palette &palette, uint32_t width, uint32_t height,
        uint8_t *output, const std::string &filename)
{
    std::vector<char> tmp(width*height*4);

    uint32_t *write_ptr = (uint32_t *)tmp.data();
    uint8_t *read_ptr = output;
    for (int y=0; y<height; y++) {
        for (int x=0; x<width; x++) {
            uint8_t value = *read_ptr++;
            uint32_t rgba = palette.lookup(value);
            if (value == 0) {
                // HACK TO GET TRANSPARENCY WORKING
                //rgba = 0;
            }
            *write_ptr++ = rgba;
        }
    }

    priv2::write_png(tmp.data(), width, height, "%s", filename.c_str());
}

void save_png(uint32_t width, uint32_t height,
        uint8_t *output, const std::string &filename)
{
    Palette palette;
    save_png(palette, width, height, output, filename);
}

};
};
